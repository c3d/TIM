// Counting number of pixels for circles of various size

import Slides

INNER -> 0
CIRCLES -> 150
SPHERE -> 10
AXES_X -> -100
AXES_Y -> -100
AXES_L -> -20
AXES_R -> 200
AXES_B -> -20
AXES_T -> 230

slide "Blank", false

slide "Circles of radius 1 and 5 without all pixels ",
    scale 8
    color "red"
    draw_circle(-10, 0, 1, 0)
    draw_circle(10, 0,  1, 1)
    color "blue"
    draw_circle(-10, 0, 5, 0)
    draw_circle(10, 0,  5, 1)

slide "Circles inner only",
   for I in INNER..CIRCLES loop
       color_hsv I*7, 1, 1
       C1 := draw_circle(0, 0, I, 0)
       writeln I, ", ", C1

slide "Circles outer only",
   for I in INNER..CIRCLES loop
       color_hsv I*7, 1, 1
       C2 := draw_circle(0, 0, I, 1)
       writeln I, ", ", C2

slide "Size",
    axes
    for I in INNER..CIRCLES loop
        color_hsv I * 37, 1, 1, 5%
        C1 := draw_circle(AXES_X, AXES_Y, I, 0)
        C2 := draw_circle(AXES_X, AXES_Y, I, 1)

        color "darkgreen"
        plot I + AXES_X, C1/4 + AXES_Y
        color "darkred"
        plot I + AXES_X, C2/4 + AXES_Y
        color "darkblue"
        plot I + AXES_X, I * pi / 2 + AXES_Y

slide "Size vs. linear",
    axes
    color "darkblue"
    rectangle AXES_X + (AXES_L+AXES_R)/2, AXES_Y + 100, AXES_R-AXES_L, 1

    for I in 0..CIRCLES loop
        color_hsv I * 37, 1, 1, 5%
        C1 := draw_circle(AXES_X, AXES_Y, I, 0)
        C2 := draw_circle(AXES_X, AXES_Y, I, 1)
        if I > 0 then
            color "darkgreen"
            plot I + AXES_X, 100 * (C1 / (2 * pi * I)) + AXES_Y
            color "red"
            plot I + AXES_X, 100 * (C2 / (2 * pi * I)) + AXES_Y


COUNTED -> 0
data COUNTED_PIXELS

slide "Sphere",
    scale 0.25

    align 0.0
    vertical_align 0.5
    font "Arial", 120
    color "black"
    text_box 0, 450, 1200, 200,
        text "Radius=" & SPHERE

    locally
        rotate_x -0.2 * mouse_y
        rotate_y 0.2 * mouse_x

        scale 400.0 / (SPHERE + 1)
        translate -0.5, -0.5, -0.5

        color "red"
        line_color "black"
        line_width 3

        COUNTED := draw_sphere(0, 0, 0, SPHERE)

    text_box 0, -450, 1200, 200,
        text "Voxels=" & COUNTED

    COUNTED_PIXELS[SPHERE + 0] := COUNTED + 0

    on "key:Right",
        SPHERE := SPHERE + 1
        refresh 0
    on "key:n",
        SPHERE := SPHERE + 10
        refresh 0
    on "key:Left",
        if SPHERE > 0 then
            SPHERE := SPHERE - 1
        refresh 0
    DIGITS -> 0
    digit N -> DIGITS := 10 * DIGITS + N
    on "key:0", digit 0
    on "key:1", digit 1
    on "key:2", digit 2
    on "key:3", digit 3
    on "key:4", digit 4
    on "key:5", digit 5
    on "key:6", digit 6
    on "key:7", digit 7
    on "key:8", digit 8
    on "key:9", digit 9
    on "key:Enter",
        SPHERE := DIGITS; DIGITS := 0; refresh 0
    on "key:Return",
        SPHERE := DIGITS; DIGITS := 0; refresh 0

slide "Sphere count",
    axes
    for I in 0..SPHERE loop
        plot_count I, COUNTED_PIXELS[I+0]

plot_count X:integer, Y:integer ->
    writeln X, ", ", Y

    color "darkblue"
    plot AXES_X + X, AXES_Y + 4 * X^2 * pi * 0.001

    color "darkred"
    plot AXES_X + X, AXES_Y + Y * 0.001

    color "blue"
    rectangle AXES_X + (AXES_L+AXES_R)/2, AXES_Y + 100, AXES_R-AXES_L, 1

    if X > 0 then
        color "red"
        plot AXES_X + X, AXES_Y + 100.0 * Y / (4 * X^2 * pi)


plot_count Other -> false

extra_pixels -> 0

// Code to draw a circle - That's where the algorithm is implemented
draw_circle xc, yc, r, ep ->
    extra_pixels := ep
    draw_circle xc, yc, r

draw_circle xc, yc, r ->

    count := 0
    d := r/2
    x  := r
    y  := 0

    while x >= y loop
        plot xc + x, yc + y
        plot xc - x, yc + y
        plot xc + x, yc - y
        plot xc - x, yc - y
        plot xc + y, yc + x
        plot xc - y, yc + x
        plot xc + y, yc - x
        plot xc - y, yc - x

        count := count + drawn_pixels(x,y)

        y := y + 1
        d := d - y
        if d < 0 then
            if extra_pixels = 1 then
                plot xc + x, yc + y
                plot xc - x, yc + y
                plot xc + x, yc - y
                plot xc - x, yc - y
                plot xc + y, yc + x
                plot xc - y, yc + x
                plot xc + y, yc - x
                plot xc - y, yc - x

                count := count + drawn_pixels(x,y)

            x := x - 1
            d := d + x
    count + 0


draw_sphere xc, yc, zc, r ->

    count := 0
    d := r/2
    x := r
    y := 0

    while x >= 0 loop

        // Inner loop
        dd := y/2
        xx := y
        yy := 0
        zz := x

        while xx >= yy loop
            plot3 xc + xx, yc + yy, zc + zz
            plot3 xc - xx, yc + yy, zc + zz
            plot3 xc + xx, yc - yy, zc + zz
            plot3 xc - xx, yc - yy, zc + zz
            plot3 xc + yy, yc + xx, zc + zz
            plot3 xc - yy, yc + xx, zc + zz
            plot3 xc + yy, yc - xx, zc + zz
            plot3 xc - yy, yc - xx, zc + zz

            count := count + drawn_pixels(xx,yy,zz)

            yy := yy + 1
            dd := dd - yy
            if xx >= yy and dd < 0 then
                plot3 xc + xx, yc + yy, zc + zz
                plot3 xc - xx, yc + yy, zc + zz
                plot3 xc + xx, yc - yy, zc + zz
                plot3 xc - xx, yc - yy, zc + zz
                plot3 xc + yy, yc + xx, zc + zz
                plot3 xc - yy, yc + xx, zc + zz
                plot3 xc + yy, yc - xx, zc + zz
                plot3 xc - yy, yc - xx, zc + zz

                count := count + drawn_pixels(xx,yy,zz)

                xx := xx - 1
                dd := dd + xx

        if x >= y then
            y := y + 1
            d := d - y
            if d < 0 then
                x := x - 1
                d := d + x
        else
            x := x - 1
            d := d + x
            if d > 0 then
                y := y + 1
                d := d - y

    count + 0


// Plot single pixel
plot x, y ->
    // In Tao3D, coordinates denote the center of a rectangle, so offset by 0.5
    rectangle x + 0.5, y + 0.5, 1, 1

plot3 x, y, z ->
    cube x + 0.5, y + 0.5, z + 0.5, 0.8, 0.8, 0.8

axes ->
    locally
        line_width 1
        line_color "darkgrey"
        line_arrow AXES_X + AXES_L, AXES_Y, NONE, AXES_X + AXES_R, AXES_Y, ARROWHEAD
        line_arrow AXES_X, AXES_Y + AXES_B, NONE, AXES_X, AXES_Y + AXES_T, ARROWHEAD


drawn_pixels x, y, z ->
    (if z > 0 then 2 else 1) * drawn_pixels(x,y)

drawn_pixels x, y ->
    if x = 0 then
        if y = 0 then
            1
        else
            4
    else if y = 0 then
        4
    else if x = y then
        4
    else
        8


slide Title, Body ->
    blank_slide Title,
        contents 0,
            scale 4
            Body

// Helper functions (that won't convert to real)
Abs X -> if X < 0 then -X else X
NegSign X -> if X > 0 then -1 else 1

key "Space" -> refresh 0
key "i" -> INNER := 130 - INNER; refresh 0
