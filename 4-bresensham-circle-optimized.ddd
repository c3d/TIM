// Demonstration of the Bresenham circle algorithm in Tao3D

// Disable filtering so that pixels look square and clean on screen
texture_mag_filter "nearest"

// Draw the circle in a 128x128 texture, which we can then enlarge to see pixels
frame_texture 128, 128,

    color "darkgreen"
    draw_circle 0, 0, 63
    draw_circle 0, 0, 60

    color "black"
    draw_circle 0, 0, 15

    color "red"
    draw_circle 3, 5, 3

    color "blue"
    draw_circle -5, 4, 6

// Display the texture enlarged four times
color "white"
rectangle 0, 0, 128*4, 128*4

// Code to draw a circle - That's where the algorithm is implemented
draw_circle xc, yc, r ->
    d := r/2
    x  := r
    y  := 0

    while x >= y loop
        plot xc + x, yc + y
        plot xc - x, yc + y
        plot xc + x, yc - y
        plot xc - x, yc - y
        plot xc + y, yc + x
        plot xc - y, yc + x
        plot xc + y, yc - x
        plot xc - y, yc - x

        y := y + 1
        d := d - y
        if d < 0 then
            x := x - 1
            d := d + x

// Plot single pixel
plot x, y ->
    // In Tao3D, coordinates denote the center of a rectangle, so offset by 0.5
    rectangle x + 0.5, y + 0.5, 1, 1

// Helper functions (that won't convert to real)
Abs X -> if X < 0 then -X else X
NegSign X -> if X > 0 then -1 else 1

key "Space" -> refresh 0
